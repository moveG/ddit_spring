/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2022-01-21 08:08:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class indexPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<title>MainPage</title>\r\n");
      out.write("\r\n");
      out.write("<head></head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"content-wrapper\" style=\"background:#f4f6f9;\">\r\n");
      out.write("		<iframe name=\"ifr\" src=\"\" frameborder=\"0\" style=\"width:100%;height:86vh;\">\r\n");
      out.write("		</iframe>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js\"></script>\r\n");
      out.write("	<script type=\"text/x-handlebars-template\" id=\"subMenu-list-template\">\r\n");
      out.write("		{{#each .}}\r\n");
      out.write("			<li class=\"nav-item subMenu\">\r\n");
      out.write("				<a href=\"javascript:goPage('");
      out.print(request.getContextPath());
      out.write("{{murl}}', '{{mcode}}');\" class=\"nav-link\">\r\n");
      out.write("					<i class=\"{{micon}}\"></i>\r\n");
      out.write("					<p>{{mname}}</p>\r\n");
      out.write("				</a>\r\n");
      out.write("			</li>\r\n");
      out.write("		{{/each}}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		function goPage(url, mCode){\r\n");
      out.write("			document.querySelector('iframe[name=\"ifr\"]').src = url;\r\n");
      out.write("			\r\n");
      out.write("			//HTML5 지원 브라우저에서 사용 가능\r\n");
      out.write("			if(typeof(history.pushState) == 'function'){\r\n");
      out.write("				//현재 주소를 가져온다.\r\n");
      out.write("				var renewURL = location.href;\r\n");
      out.write("				\r\n");
      out.write("				//현재 주소에서 .do 뒷부분이 있다면 날린다.\r\n");
      out.write("				renewURL = renewURL.substring(0, renewURL.indexOf(\".do\") + 3);\r\n");
      out.write("				if(mCode != \"M000000\"){\r\n");
      out.write("					renewURL += \"?mCode=\" + mCode;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				//페이지를 리로드하지 않고, 페이지 주소만 변경할 때 사용한다.\r\n");
      out.write("				history.pushState(mCode, null, renewURL);\r\n");
      out.write("			}else{\r\n");
      out.write("				location.hash = \"#\" + mCode;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function subMenu_go(mCode){\r\n");
      out.write("			if(mCode != \"M000000\"){\r\n");
      out.write("				//ajax 변형상태 - error페이지는 없음\r\n");
      out.write("				$.getJSON(\"");
      out.print(request.getContextPath());
      out.write("/subMenu.do?mCode=\" + mCode, function(data){\r\n");
      out.write("					//printData(데이터, 타겟, 템플릿, 제거클래스);\r\n");
      out.write("					printData(data, $('.subMenuList'), $('#subMenu-list-template'), '.subMenu');\r\n");
      out.write("				});\r\n");
      out.write("			}else{\r\n");
      out.write("				$('.subMenuList').html(\"\");\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//handlebars printElement(args : data Array, append target, handlebar template, remove class)\r\n");
      out.write("		function printData(dataArr, target, templateObject, removeClass){\r\n");
      out.write("			//컴파일\r\n");
      out.write("			var template = Handlebars.compile(templateObject.html());\r\n");
      out.write("			\r\n");
      out.write("			//실행\r\n");
      out.write("			var html = template(dataArr);\r\n");
      out.write("			\r\n");
      out.write("			//먼저 것 삭제\r\n");
      out.write("			$(removeClass).remove();//JQUERY 방식\r\n");
      out.write("			\r\n");
      out.write("			//새로 만든 것 삽입\r\n");
      out.write("			target.append(html);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		window.onload = function(){\r\n");
      out.write("			goPage('");
      out.print(request.getContextPath());
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${menu.murl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("', '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${menu.mcode}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("			subMenu_go('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${menu.mcode}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'.substring(0,3) + \"0000\");\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
